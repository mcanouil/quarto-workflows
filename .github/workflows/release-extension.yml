name: Release Quarto Extension

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        description: "GitHub token"
        required: false
      APP_KEY:
        description: "GitHub App private key"
        required: false
    inputs:
      version:
        description: "Version"
        required: true
        default: "patch"
        type: string
      formats:
        description: "Output formats (space-separated list)"
        required: true
        default: "html"
        type: string
      quarto:
        description: "Quarto version"
        required: true
        default: "release"
        type: string
      tinytex:
        description: "Install TinyTeX"
        required: true
        default: false
        type: boolean
      r:
        description: "Install R"
        required: false
        default: false
        type: boolean
      python:
        description: "Install Python"
        required: false
        default: false
        type: boolean
      julia:
        description: "Install Julia"
        required: false
        default: false
        type: boolean
      gh-app-id:
        description: "GitHub App ID"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  id-token: write
  pages: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    env:
      BRANCH: ci/bump-version
      COMMIT: "ci: bump version for release :rocket:"
      BUMP_VERSION: ${{ inputs.version }}

    outputs:
      version: ${{ steps.bump-version.outputs.version }}
      release_title: ${{ steps.bump-version.outputs.release_title }}
      summary: ${{ steps.bump-version.outputs.summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          git config --global user.name "${USER_NAME}"
          git config --global user.email "${USER_EMAIL}"

      - name: Bump Version
        id: bump-version
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }} # gh cli
        shell: bash
        run: |
          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git branch -D "${BRANCH}"
            git push origin --delete "${BRANCH}"
          fi
          git checkout -b "${BRANCH}"

          REPO="${GITHUB_REPOSITORY}"
          PREFIX="${GITHUB_REPOSITORY_OWNER}/quarto-"
          EXTENSION="${REPO#${PREFIX}}"
          EXTENSION=${EXTENSION#revealjs-}
          MANIFEST="_extensions/${EXTENSION}/_extension.yml"
          echo "Manifest: ${MANIFEST}"
          DATE=$(date +%Y-%m-%d)
          CURRENT_VERSION=$(grep "^version:" "${MANIFEST}" | sed 's/version: //;s/"//g')
          echo "Current Version: ${CURRENT_VERSION}"
          MAJOR=$(echo ${CURRENT_VERSION} | cut -d. -f1)
          MINOR=$(echo ${CURRENT_VERSION} | cut -d. -f2)
          PATCH=$(echo ${CURRENT_VERSION} | cut -d. -f3)
          echo "Bumping Version: ${BUMP_VERSION}"
          case "${BUMP_VERSION}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New Version: ${VERSION}"
          sed -i "s/^version:.*/version: ${VERSION}/" "${MANIFEST}"
          sed -i "s/^version:.*/version: ${VERSION}/" CITATION.cff
          sed -i "s/^date-released:.*/date-released: \"${DATE}\"/" CITATION.cff
          git add CITATION.cff || echo "No changes to add"
          git add "${MANIFEST}" || echo "No changes to add"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to push"

          sleep 5
          gh pr create --fill-first --base "${GITHUB_REF_NAME}" --head "${BRANCH}" --label "Type: CI/CD :robot:"
          sleep 5
          gh pr merge --auto --squash --delete-branch
          sleep 5

          RELEASE_TITLE=${EXTENSION^^}
          RELEASE_TITLE=${RELEASE_TITLE//-/ }

          SUMMARY="## 📈 Version Bump\n\n"
          SUMMARY+="| Field | Value |\n"
          SUMMARY+="|-------|--------|\n"
          SUMMARY+="| Extension | \`${EXTENSION}\` |\n"
          SUMMARY+="| Previous Version | \`${CURRENT_VERSION}\` |\n"
          SUMMARY+="| New Version | \`${VERSION}\` |\n"
          SUMMARY+="| Bump Type | \`${BUMP_VERSION}\` |\n"
          SUMMARY+="| Release Date | \`${DATE}\` |\n"

          {
            echo "version=${VERSION}"
            echo "release_title=${RELEASE_TITLE} ${VERSION}"
            echo "summary=${SUMMARY}"
          } >> "${GITHUB_OUTPUT}"

  deploy:
    runs-on: ubuntu-latest

    needs: bump-version

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    env:
      OUTPUT_DIRECTORY: _site
      FORMATS: ${{ inputs.formats }}
      QUARTOVERSION: ${{ inputs.quarto }}
      TINYTEX: ${{ inputs.tinytex }}

    outputs:
      gh_pages_url: ${{ steps.deployment.outputs.page_url }}
      summary: ${{ steps.deployment-summary.outputs.summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          git config --global user.name "${USER_NAME}"
          git config --global user.email "${USER_EMAIL}"

      - name: Update branch
        run: |
          git fetch --all
          git checkout "${GITHUB_REF_NAME}"
          git pull origin "${GITHUB_REF_NAME}"

      - name: Check R environment
        id: check-r-env
        env:
          R: ${{ inputs.r }}
        run: |
          if [ "${R}" = "true" ] && [ -f "renv.lock" ]; then
            echo "renv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "renv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Set up R
        if: ${{ inputs.r }}
        uses: r-lib/actions/setup-r@v2

      - name: Install renv
        if: ${{ inputs.r && steps.check-r-env.outputs.renv == 'true' }}
        uses: r-lib/actions/setup-renv@v2

      - name: Install R dependencies
        if: ${{ inputs.r }}
        env:
          RENV: ${{ steps.check-r-env.outputs.renv == 'true' }}
        shell: bash
        run: |
          if [ "${RENV}" = "true" ]; then
            Rscript -e 'renv::restore()'
          else
            Rscript -e 'install.packages(c("knitr", "rmarkdown"))'
          fi

      - name: Check Python environment
        id: check-python-env
        env:
          PYTHON: ${{ inputs.python }}
        run: |
          if [ "${PYTHON}" = "true" ] && [ -f "pyproject.toml" ]; then
            echo "python=true" >> "${GITHUB_OUTPUT}"
          else
            echo "python=false" >> "${GITHUB_OUTPUT}"
          fi
          if [ "${PYTHON}" = "true" ] && [ -f "uv.lock" ]; then
            echo "uv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "uv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install uv
        if: ${{ inputs.python && steps.check-python-env.outputs.uv == 'true' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install uv
        if: ${{ inputs.python && steps.check-python-env.outputs.uv == 'false' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        if: ${{ inputs.python && steps.check-python-env.outputs.python == 'true' }}
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Set up Python
        if: ${{ inputs.python && steps.check-python-env.outputs.python == 'false' }}
        uses: actions/setup-python@v6

      - name: Install Python dependencies
        if: ${{ inputs.python }}
        env:
          UV: ${{ steps.check-python-env.outputs.uv == 'true' }}
        shell: bash
        run: |
          if [ "${UV}" = "true" ]; then
            uv sync
          else
            uv init --no-package --vcs none --bare --no-readme --author-from none
            uv venv
            source .venv/bin/activate
            uv add jupyter papermill
            uv sync
          fi

      - name: Set up Julia
        if: ${{ inputs.julia }}
        uses: julia-actions/setup-julia@v2

      - name: Install Julia dependencies
        if: ${{ inputs.julia }}
        shell: bash
        run: |
          julia -e 'using Pkg; Pkg.activate("."); Pkg.instantiate()'
          julia --project=. -e 'using Pkg; Pkg.add(["IJulia"])'

      - name: Set up Node.js
        uses: actions/setup-node@v5

      - name: Check inputs
        shell: bash
        run: |
          echo "Quarto: ${QUARTOVERSION}"
          echo "TinyTeX: ${TINYTEX}"
          echo "Formats: ${FORMATS}"

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: "${{ env.QUARTOVERSION }}"
          tinytex: "${{ env.TINYTEX }}"

      - name: Checkout repository with sparse checkout
        uses: actions/checkout@v5
        with:
          repository: mcanouil/quarto-workflows
          sparse-checkout: .github/workflows/assets/slides-to-pdf.sh
          sparse-checkout-cone-mode: false
          path: workflows

      - name: Render Quarto Project
        id: render-quarto
        env:
          PYTHON: ${{ inputs.python }}
        shell: bash
        run: |
          if [ "${PYTHON}" = "true" ]; then
            source .venv/bin/activate
          fi
          npm install -g decktape

          # Create or update _quarto.yml with intelligent merging
          SLIDES_SCRIPT="workflows/.github/workflows/assets/slides-to-pdf.sh"
          if [ ! -f "_quarto.yml" ]; then
            # Create new _quarto.yml if it doesn't exist
            {
              echo "project:"
              echo "  output-dir: ${OUTPUT_DIRECTORY}"
              echo "  post-render:"
              echo "    - ${SLIDES_SCRIPT}"
            } > _quarto.yml
          else
            # Update existing _quarto.yml
            echo "Existing _quarto.yml found, merging configuration..."
            # Set output-dir (always overwrite)
            yq eval '.project.output-dir = "${OUTPUT_DIRECTORY}"' -i _quarto.yml
            # Handle post-render array merging
            if yq eval '.project.post-render' _quarto.yml | grep -q "null"; then
              # No post-render exists, create it
              yq eval '.project.post-render = ["'${SLIDES_SCRIPT}'"]' -i _quarto.yml
            else
              # Check if our script is already in the post-render list
              if ! yq eval '.project.post-render[] | select(. == "'${SLIDES_SCRIPT}'")' _quarto.yml | grep -q "${SLIDES_SCRIPT}"; then
                # Add our script to the existing post-render list
                yq eval '.project.post-render += ["'${SLIDES_SCRIPT}'"]' -i _quarto.yml
              else
                echo "Script already exists in post-render list, skipping..."
              fi
            fi
          fi
          echo "Updated _quarto.yml:"
          cat _quarto.yml

          # Render to all formats via for loop to avoid LaTeX error "pdf/beamer" formats
          if [ "${ACTIONS_RUNNER_DEBUG}" = "true" ] || [ "${ACTIONS_STEP_DEBUG}" = "true" ]; then
            echo "$(getconf ARG_MAX)" # debug
            export QUARTO_DENO_V8_OPTIONS=--stack-trace-limit=100 # debug
            export QUARTO_PRINT_STACK=true # debug
            export QUARTO_LOG_LEVEL=DEBUG # debug
          fi
          for format in ${FORMATS}; do
            quarto render --to ${format}
          done

          tar -czf gh-pages.tar.gz -C "${OUTPUT_DIRECTORY}" .

          if [ -d "release_assets" ]; then
            echo "slides_assets_exists=true" >> "${GITHUB_OUTPUT}"
            RELEASE_ASSETS_PATH="$(pwd)/release_assets"
            echo "release_assets_path=${RELEASE_ASSETS_PATH}" >> "${GITHUB_OUTPUT}"
          else
            echo "slides_assets_exists=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        id: upload-artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: "${{ env.OUTPUT_DIRECTORY }}"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload artifact (revealjs)
        uses: actions/upload-artifact@v4
        if: ${{ steps.render-quarto.outputs.slides_assets_exists == 'true' }}
        with:
          name: release-assets
          path: |
            ${{ steps.render-quarto.outputs.release_assets_path }}
            gh-pages.tar.gz

      - name: Upload artifact (default)
        uses: actions/upload-artifact@v4
        if: ${{ steps.render-quarto.outputs.slides_assets_exists == 'false' }}
        with:
          name: release-assets
          path: |
            gh-pages.tar.gz

      - name: Update template thumbnail
        if: ${{ steps.render-quarto.outputs.slides_assets_exists == 'true' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }} # gh cli
          RELEASE_ASSETS_PATH: ${{ steps.render-quarto.outputs.release_assets_path }}
          BRANCH: ci/update-thumbs
          COMMIT: "ci: update thumbs :art:"
        shell: bash
        run: |
          if [ -f "${OUTPUT_DIRECTORY}/index.png" ]; then
            mv -f "${OUTPUT_DIRECTORY}/index.png" .github/template.png
            if git show-ref --quiet refs/heads/${BRANCH}; then
              echo "Branch ${BRANCH} already exists."
              git branch -D "${BRANCH}"
              git push origin --delete "${BRANCH}"
            fi
            git checkout -b "${BRANCH}"
            git add .github/template.png || echo "No changes to add"
            if ! git diff --cached --quiet; then
              git commit -m "${COMMIT}"
              git push --force origin ${BRANCH}
              gh pr create --fill-first --base "${GITHUB_REF_NAME}" --head "${BRANCH}" --label "Type: CI/CD :robot:"
              sleep 5
              gh pr merge --auto --squash --delete-branch
              sleep 5
            else
              echo "No changes to commit."
            fi
          fi

      - name: Add deployment summary
        id: deployment-summary
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        shell: bash
        run: |
          SUMMARY="## 🚀 Deployment\n\n"
          SUMMARY+="| Field | Value |\n"
          SUMMARY+="|-------|--------|\n"
          SUMMARY+="| Quarto Version | \`${QUARTOVERSION}\` |\n"
          SUMMARY+="| Output Formats | \`${FORMATS}\` |\n"
          SUMMARY+="| GitHub Pages URL | [${PAGE_URL}](${PAGE_URL}) |\n"
          echo "summary=${SUMMARY}" >> "${GITHUB_OUTPUT}"

  release:
    runs-on: ubuntu-latest

    needs:
      - bump-version
      - deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          git config --global user.name "${USER_NAME}"
          git config --global user.email "${USER_EMAIL}"

      - name: Update branch
        run: |
          git fetch --all
          git checkout "${GITHUB_REF_NAME}"
          git pull origin "${GITHUB_REF_NAME}"

      - name: Download PDF artifact
        id: download-release-assets-artifact
        uses: actions/download-artifact@v5
        with:
          name: release-assets
          path: release_assets

      - name: Release extension on GitHub
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }} # gh cli
          VERSION: ${{ needs.bump-version.outputs.version }}
          RELEASE_TITLE: ${{ needs.bump-version.outputs.release_title }}
        shell: bash
        run: |
          assets=()
          while IFS= read -r -d '' file; do
            assets+=("${file}")
          done < <(find release_assets -type f -print0)

          gh release create "${VERSION}" \
            --title "${RELEASE_TITLE}" \
            --generate-notes \
            "${assets[@]}"

      - name: Display workflow summary
        env:
          GH_PAGES_URL: ${{ needs.deploy.outputs.gh_pages_url }}
          VERSION: ${{ needs.bump-version.outputs.version }}
          BUMP_SUMMARY: ${{ needs.bump-version.outputs.summary }}
          DEPLOY_SUMMARY: ${{ needs.deploy.outputs.summary }}
        shell: bash
        run: |
          REPO="${GITHUB_REPOSITORY}"
          EXTENSION="${REPO#${GITHUB_REPOSITORY_OWNER}/quarto-}"

          {
            echo "# 🎉 Release Summary"
            echo ""
            echo "🤖 *Automated release completed successfully*"
            echo ""
            echo "### Extension Details"
            echo "- **Extension Name**: \`${EXTENSION}\`"
            echo "- **Version**: \`${VERSION}\`"
            echo ""
            echo "### 🔗 Links"
            echo "- [📦 GitHub Release](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${VERSION})"
            echo "- [🌐 Live Demo](${GH_PAGES_URL})"
            echo ""
            echo "---"
            echo ""
            echo -e "${BUMP_SUMMARY}"
            echo ""
            echo -e "${DEPLOY_SUMMARY}"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"
