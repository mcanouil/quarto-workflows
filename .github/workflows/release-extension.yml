name: Release Quarto Extension

on:
  workflow_call:
    inputs:
      version:
        description: "Version"
        required: true
        default: "patch"
        type: string
      formats:
        description: "Output formats (space-separated list)"
        required: true
        default: "html"
        type: string
      quarto:
        description: "Quarto version"
        required: true
        default: "release"
        type: string
      tinytex:
        description: "Install TinyTeX"
        required: true
        default: false
        type: boolean
      r:
        description: "Install R"
        required: false
        default: false
        type: boolean
      python:
        description: "Install Python"
        required: false
        default: false
        type: boolean
      julia:
        description: "Install Julia"
        required: false
        default: false
        type: boolean

env:
  GH_TOKEN: ${{ secrets.github_token }} # gh cli
  BRANCH: ci/bump-version
  COMMIT: "ci: bump version for release :rocket:"
  BUMPVERSION: ${{ inputs.version }}
  FORMATS: ${{ inputs.formats }}
  QUARTOVERSION: ${{ inputs.quarto }}
  TINYTEX: ${{ inputs.tinytex }}

permissions:
  contents: write
  pull-requests: write
  id-token: write
  pages: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.bump-version.outputs.VERSION }}
      VERSION_MESSAGE: ${{ steps.bump-version.outputs.VERSION_MESSAGE }}
      RELEASE_TITLE: ${{ steps.bump-version.outputs.RELEASE_TITLE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump Version
        id: bump-version
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com

          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git branch -D "${BRANCH}"
            git push origin --delete "${BRANCH}"
          fi
          git checkout -b "${BRANCH}"

          REPO="${GITHUB_REPOSITORY}"
          PREFIX="${GITHUB_REPOSITORY_OWNER}/quarto-"
          EXTENSION="${REPO#${PREFIX}}"
          EXTENSION=${EXTENSION#revealjs-}
          MANIFEST="_extensions/${EXTENSION}/_extension.yml"
          echo "::notice ::Manifest: ${MANIFEST}"
          DATE=$(date +%Y-%m-%d)
          CURRENT_VERSION=$(grep "^version:" "${MANIFEST}" | sed 's/version: //;s/"//g')
          echo "::notice ::Current Version: ${CURRENT_VERSION}"
          MAJOR=$(echo ${CURRENT_VERSION} | cut -d. -f1)
          MINOR=$(echo ${CURRENT_VERSION} | cut -d. -f2)
          PATCH=$(echo ${CURRENT_VERSION} | cut -d. -f3)
          echo "::notice ::Bumping Version: ${BUMPVERSION}"
          case "${BUMPVERSION}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "::notice ::New Version: ${VERSION}"
          sed -i "s/^version:.*/version: ${VERSION}/" "${MANIFEST}"
          sed -i "s/^version:.*/version: ${VERSION}/" CITATION.cff
          sed -i "s/^date-released:.*/date-released: \"${DATE}\"/" CITATION.cff
          git add CITATION.cff || echo "No changes to add"
          git add "${MANIFEST}" || echo "No changes to add"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to push"

          RELEASE_TITLE=${EXTENSION^^}
          RELEASE_TITLE=${RELEASE_TITLE//-/ }
          {
            echo "VERSION=${VERSION}"
            echo "VERSION_MESSAGE=::notice file=${MANIFEST},line=${LINE}::Version: ${VERSION}"
            echo "RELEASE_TITLE=${RELEASE_TITLE} ${VERSION}"
          } >> "${GITHUB_OUTPUT}"

          # Workflow summary
          {
            echo "## 📈 Version Bump Summary"
            echo ""
            echo "| Field | Value |"
            echo "|-------|--------|"
            echo "| Extension | \`${EXTENSION}\` |"
            echo "| Previous Version | \`${CURRENT_VERSION}\` |"
            echo "| New Version | \`${VERSION}\` |"
            echo "| Bump Type | \`${BUMPVERSION}\` |"
            echo "| Release Date | \`${DATE}\` |"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Create and Merge Pull Request
        shell: bash
        run: |
          sleep 5
          gh pr create --fill-first --base "main" --head "${BRANCH}" --label "Type: CI/CD :robot:"
          sleep 5
          gh pr merge --auto --squash --delete-branch
          sleep 5

  deploy:
    runs-on: ubuntu-latest

    needs: bump-version

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    outputs:
      gh_pages_url: ${{ steps.deployment.outputs.page_url }}
      gh_pages_artifact: ${{ steps.upload-artifact.outputs.artifact_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check R environment
        id: check-r-env
        env:
          R: ${{ inputs.r }}
        run: |
          if [ "${R}" = "true" ] && [ -f "renv.lock" ]; then
            echo "renv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "renv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Set up R
        if: ${{ inputs.r == 'true' }}
        uses: r-lib/actions/setup-r@v2

      - name: Install renv
        if: ${{ inputs.r == 'true' && steps.check-r-env.outputs.renv == 'true' }}
        uses: r-lib/actions/setup-renv@v2

      - name: Install R dependencies
        if: ${{ inputs.r == 'true' }}
        env:
          RENV: ${{ steps.check-r-env.outputs.renv == 'true' }}
        shell: bash
        run: |
          if [ "${RENV}" = "true" ]; then
            Rscript -e 'renv::restore()'
          else
            Rscript -e 'install.packages(c("knitr", "rmarkdown"))'
          fi

      - name: Check Python environment
        id: check-python-env
        env:
          PYTHON: ${{ inputs.python }}
        run: |
          if [ "${PYTHON}" = "true" ] && [ -f "pyproject.toml" ]; then
            echo "python=true" >> "${GITHUB_OUTPUT}"
          else
            echo "python=false" >> "${GITHUB_OUTPUT}"
          fi
          if [ "${PYTHON}" = "true" ] && [ -f "uv.lock" ]; then
            echo "uv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "uv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install uv
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.uv == 'true' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install uv
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.uv == 'false' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.python == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Set up Python
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.python == 'false' }}
        uses: actions/setup-python@v5

      - name: Install Python dependencies
        if: ${{ inputs.python == 'true' }}
        env:
          UV: ${{ steps.check-python-env.outputs.uv == 'true' }}
        shell: bash
        run: |
          if [ "${UV}" = "true" ]; then
            uv sync
          else
            uv init --no-package --vcs none --bare --no-readme --author-from none
            uv venv
            source .venv/bin/activate
            uv add jupyter papermill
            uv sync
          fi

      - name: Set up Julia
        if: ${{ inputs.julia == 'true' }}
        uses: julia-actions/setup-julia@v2

      - name: Install Julia dependencies
        if: ${{ inputs.julia == 'true' }}
        shell: bash
        run: |
          julia -e 'using Pkg; Pkg.activate("."); Pkg.instantiate()'
          julia --project=. -e 'using Pkg; Pkg.add(["IJulia"])'

      - name: Update branch
        run: |
          git fetch --all
          git checkout main
          git pull origin main

      - name: Check inputs
        shell: bash
        run: |
          echo "::notice ::Quarto: ${QUARTOVERSION}"
          echo "::notice ::TinyTeX: ${TINYTEX}"
          echo "::notice ::Formats: ${FORMATS}"

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: "${{ env.QUARTOVERSION }}"
          tinytex: "${{ env.TINYTEX }}"

      - name: Render Quarto Project
        shell: bash
        run: |
          echo -e "project:\n  output-dir: _site" > _quarto.yml
          # Render to all formats via for loop to avoid LaTeX error "pdf/beamer" formats
          for format in ${FORMATS}; do
            quarto render --to ${format}
          done

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        id: upload-artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add deployment summary
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        shell: bash
        run: |
          {
            echo "## 🚀 Deployment Summary"
            echo ""
            echo "| Field | Value |"
            echo "|-------|--------|"
            echo "| Quarto Version | \`${QUARTOVERSION}\` |"
            echo "| Output Formats | \`${FORMATS}\` |"
            echo "| GitHub Pages URL | [${PAGE_URL}](${PAGE_URL}) |"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"

  title-slide-screenshot:
    runs-on: ubuntu-latest

    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Take Screenshot
        env:
          GH_PAGES_URL: ${{ needs.deploy.outputs.gh_pages_url }}
          GH_TOKEN: ${{ secrets.github_token }} # gh cli
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com

          REPO="${GITHUB_REPOSITORY}"
          EXTENSION="${REPO#${GITHUB_REPOSITORY_OWNER}/quarto-}"

          if [[ "${REPO}" == *"revealjs"* ]]; then
            npx -y decktape reveal \
              --chrome-arg=--no-sandbox \
              --chrome-arg=--disable-setuid-sandbox \
              --screenshots \
              --screenshots-format png \
              --screenshots-directory . \
              --size "1280x640" \
              --slides 1 \
              "${GH_PAGES_URL}" index.pdf

            mv -f *.png .github/template.png

            BRANCH=ci/update-thumbs
            if git show-ref --quiet refs/heads/${BRANCH}; then
              echo "Branch ${BRANCH} already exists."
              git branch -D "${BRANCH}"
              git push origin --delete "${BRANCH}"
            fi
            git checkout -b "${BRANCH}"
            git add .github/template.png || echo "No changes to add"
            if ! git diff --cached --quiet; then
              git commit -m "ci: update thumbs"
              git push --force origin ${BRANCH}
              gh pr create --fill-first --base "main" --head "${BRANCH}" --label "Type: CI/CD :robot:"
              sleep 5
              gh pr merge --auto --squash --delete-branch
              sleep 5
            else
              echo "No changes to commit."
            fi
          fi

          # Add screenshot summary
          {
            echo "## 📸 Screenshot Summary"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"
          if [[ "${REPO}" == *"revealjs"* ]]; then
            {
              echo "✅ Screenshot taken for RevealJS extension: \`${EXTENSION}\`"
              echo "- Template image updated at \`.github/template.png\`"
            } >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "ℹ️ Skipped screenshot for non-RevealJS extension: \`${EXTENSION}\`" >> "${GITHUB_STEP_SUMMARY}"
          fi
          echo "" >> "${GITHUB_STEP_SUMMARY}"

  slides-to-pdf:
    runs-on: ubuntu-latest

    needs:
      - deploy

    outputs:
      slides-pdf-exists: ${{ steps.convert-slides.outputs.SLIDES_PDF_EXISTS }}
      slides-pdf: ${{ steps.convert-slides.outputs.SLIDES_PDF }}
      slides-png: ${{ steps.convert-slides.outputs.SLIDES_PNG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Download artifact
        id: download-pages-artifact
        uses: actions/download-artifact@v5
        with:
          artifact-ids: ${{ needs.deploy.outputs.gh_pages_artifact }}

      - name: Convert slides to PDF
        id: convert-slides
        env:
          GH_TOKEN: ${{ secrets.github_token }} # gh cli
        shell: bash
        run: |
          REPO="${GITHUB_REPOSITORY}"
          EXTENSION="${REPO#${GITHUB_REPOSITORY_OWNER}/quarto-}"
          mkdir _site && tar -xf artifact.tar -C _site || echo "No artifact.tar to extract"
          if [[ "${REPO}" == *"revealjs"* ]]; then
            SLIDES_PATH=$(find _site -name "index.html" | head -n 1)
            PDF_AUTHOR=$(grep -o '<meta name="author" content="[^"]*"' "${SLIDES_PATH}" | sed 's/<meta name="author" content="\(.*\)"/\1/')
            PDF_TITLE=$(grep -o '<title>.*</title>' "${SLIDES_PATH}" | sed 's/<title>\(.*\)<\/title>/\1/')

            sed "s/el.parentElement.parentElement.parentElement;/el.parentElement.parentElement.parentElement.parentElement;/g;" "${SLIDES_PATH}" > "${SLIDES_PATH}.decktape.html"

            npx -y decktape reveal \
              --chrome-arg="--no-sandbox" \
              --chrome-arg="--disable-setuid-sandbox" \
              --size "1920x1080" \
              --screenshots \
              --screenshots-format png \
              --screenshots-directory . \
              --slides 1 \
              "${SLIDES_PATH}.decktape.html" index.pdf

            rm index.pdf

            mv index_1_1920x1080.png "${EXTENSION}.png"

            npx -y decktape reveal \
              --chrome-arg="--no-sandbox" \
              --chrome-arg="--disable-setuid-sandbox" \
              --size "1920x1080" \
              --pause 2000 \
              --load-pause 2000 \
              --fragments \
              --pdf-author "${PDF_AUTHOR}" \
              --pdf-title "${PDF_TITLE}" \
              "${SLIDES_PATH}.decktape.html" "${SLIDES_PATH%.html}.pdf"

            mv "${SLIDES_PATH%.html}.pdf" "${EXTENSION}.pdf"

            rm "${SLIDES_PATH}.decktape.html"

            {
              echo "SLIDES_PDF_EXISTS=true"
              echo "SLIDES_PDF=${EXTENSION}.pdf"
              echo "SLIDES_PNG=${EXTENSION}.png"
            } >> "${GITHUB_OUTPUT}"
          else
            {
              echo "SLIDES_PDF_EXISTS=false"
            } >> "${GITHUB_OUTPUT}"
          fi

          # Add PDF conversion summary
          {
            echo "## PDF Conversion Summary"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"
          if [[ "${REPO}" == *"revealjs"* ]]; then
            {
              echo "✅ PDF generated for RevealJS extension: \`${EXTENSION}\`"
              echo "- Slides converted to PDF format at \`${EXTENSION}.pdf\`"
              echo "- Poster image created at \`${EXTENSION}.png\`"
            } >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "ℹ️ Skipped PDF conversion for non-RevealJS extension: \`${EXTENSION}\`" >> "${GITHUB_STEP_SUMMARY}"
          fi
          echo "" >> "${GITHUB_STEP_SUMMARY}"

      - name: Upload artifact (revealjs)
        uses: actions/upload-artifact@v4
        if: ${{ steps.convert-slides.outputs.SLIDES_PDF_EXISTS == 'true' }}
        with:
          name: extension-assets
          path: |
            ${{ steps.convert-slides.outputs.SLIDES_PDF }}
            ${{ steps.convert-slides.outputs.SLIDES_PNG }}
            ${{ steps.download-pages-artifact.outputs.download-path }}/_site

      - name: Upload artifact (default)
        uses: actions/upload-artifact@v4
        if: ${{ steps.convert-slides.outputs.SLIDES_PDF_EXISTS == 'false' }}
        with:
          name: extension-assets
          path: |
            ${{ steps.download-pages-artifact.outputs.download-path }}/_site

  release:
    runs-on: ubuntu-latest

    needs:
      - bump-version
      - deploy
      - title-slide-screenshot
      - slides-to-pdf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update branch
        run: |
          git fetch --all
          git checkout main
          git pull origin main

      - name: Download PDF artifact
        id: download-extension-assets-artifact
        uses: actions/download-artifact@v5
        with:
          name: extension-assets

      - name: Release extension on GitHub
        env:
          GH_TOKEN: ${{ secrets.github_token }} # gh cli
          GH_PAGES_URL: ${{ needs.deploy.outputs.gh_pages_url }}
          VERSION: ${{ needs.bump-version.outputs.VERSION }}
          VERSION_MESSAGE: ${{ needs.bump-version.outputs.VERSION_MESSAGE }}
          RELEASE_TITLE: ${{ needs.bump-version.outputs.RELEASE_TITLE }}
          EXTENSION_ARTIFACT: ${{ steps.download-extension-assets-artifact.outputs.download-path }}
          SLIDES_PNG: ${{ needs.slides-to-pdf.outputs.slides-png }}
          SLIDES_PDF: ${{ needs.slides-to-pdf.outputs.slides-pdf }}
        shell: bash
        run: |
          REPO="${GITHUB_REPOSITORY}"
          EXTENSION="${REPO#${GITHUB_REPOSITORY_OWNER}/quarto-}"
          tar -xf artifact.tar || echo "No artifact.tar to extract"
          site_asset="${GH_PAGES_PATH_ARTIFACT}/_site"
          assets=("${site_asset}#Live Demo")
          if [[ "${REPO}" == *"revealjs"* ]]; then
            poster_asset="${SLIDES_PATH_ARTIFACT}/${SLIDES_PNG}"
            pdf_asset="${SLIDES_PATH_ARTIFACT}/${SLIDES_PDF}"
            assets+=("${poster_asset}#Poster" "${pdf_asset}#Slides PDF")
          fi
          gh release create "${VERSION}" \
            --title "${RELEASE_TITLE}" \
            --generate-notes \
            "${assets[@]}"

          # Add final release summary
          {
            echo "## 🎉 Release Summary"
            echo ""
            echo "### Extension Details"
            echo "- **Extension Name**: \`${EXTENSION}\`"
            echo "- **Version**: \`${VERSION}\`"
            echo ""
            echo "### 🔗 Links"
            echo "- [📦 GitHub Release](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${VERSION})"
            echo "- [🌐 Live Demo](${GH_PAGES_URL})"
            echo ""
            echo "---"
            echo "🤖 *Automated release completed successfully*"
          } >> "${GITHUB_STEP_SUMMARY}"
