name: Release Reveal.js Slides

on:
  workflow_call:
    secrets:
      GITHUB_TOKEN:
        description: "GitHub token"
        required: false
      APP_KEY:
        description: "GitHub App private key"
        required: false
    inputs:
      quarto:
        description: "Quarto version"
        required: true
        default: "release"
        type: string
      r:
        description: "Install R"
        required: false
        default: false
        type: boolean
      python:
        description: "Install Python"
        required: false
        default: false
        type: boolean
      julia:
        description: "Install Julia"
        required: false
        default: false
        type: boolean
      gh-app-id:
        description: "GitHub App ID"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  id-token: write
  pages: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.bump-version.outputs.version }}
      date: ${{ steps.bump-version.outputs.date }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          echo "GIT_USER_NAME=${APP_SLUG}" >> "${GITHUB_ENV}"
          echo "GIT_USER_EMAIL=${APP_SLUG}" >> "${GITHUB_ENV}"

      - name: Bump Version
        id: bump-version
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }} # gh cli
          BRANCH: ci/bump-version
          COMMIT: "ci: bump version for release :rocket:"
        shell: bash
        run: |
          git config --local user.name "${GIT_USER_NAME}"
          git config --local user.email "${GIT_USER_EMAIL}"
          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git branch -D "${BRANCH}"
            git push origin --delete "${BRANCH}"
          fi
          git checkout -b "${BRANCH}"

          CURRENT_DATE=$(date +%Y-%m-%d)
          DATE=$(grep '^date-released:' CITATION.cff | awk '{print $2}' | tr -d '"')
          VERSION=$(grep '^version:' CITATION.cff | awk '{print $2}')
          if [ "${DATE}" = "${CURRENT_DATE}" ]; then
            if [[ "${VERSION}" =~ -([0-9]+)$ ]]; then
              NUMBER=$(( ${BASH_REMATCH[1]} + 1 ))
              VERSION="${VERSION%-*}-${NUMBER}"
            else
              VERSION="${VERSION}-2"
            fi
          else
            VERSION=${CURRENT_DATE//-/.}
          fi
          DATE="${CURRENT_DATE}"
          sed -i "s/^date-released:.*/date-released: \"${DATE}\"/" CITATION.cff
          sed -i "s/^version:.*/version: ${VERSION}/" CITATION.cff

          git add CITATION.cff || echo "No changes to add"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to push"
          sleep 5
          gh pr create --fill-first --base "${GITHUB_REF_NAME}" --head "${BRANCH}" --label "Type: CI/CD :robot:"
          sleep 5
          gh pr merge --auto --squash --delete-branch
          sleep 5

          {
            echo "version=${VERSION}"
            echo "date=${DATE}"
          } >> "${GITHUB_OUTPUT}"

  deploy:
    runs-on: ubuntu-latest

    needs: bump-version

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    env:
      QUARTOVERSION: ${{ inputs.quarto }}
      OUTPUT_DIRECTORY: _site

    outputs:
      gh_pages_url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          echo "GIT_USER_NAME=${APP_SLUG}" >> "${GITHUB_ENV}"
          echo "GIT_USER_EMAIL=${APP_SLUG}" >> "${GITHUB_ENV}"

      - name: Update branch
        run: |
          git fetch --all
          git checkout "${GITHUB_REF_NAME}"
          git pull origin "${GITHUB_REF_NAME}"

      - name: Check R environment
        id: check-r-env
        env:
          R: ${{ inputs.r }}
        run: |
          if [ "${R}" = "true" ] && [ -f "renv.lock" ]; then
            echo "renv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "renv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Set up R
        if: ${{ inputs.r == 'true' }}
        uses: r-lib/actions/setup-r@v2

      - name: Install renv
        if: ${{ inputs.r == 'true' && steps.check-r-env.outputs.renv == 'true' }}
        uses: r-lib/actions/setup-renv@v2

      - name: Install R dependencies
        if: ${{ inputs.r == 'true' }}
        env:
          RENV: ${{ steps.check-r-env.outputs.renv == 'true' }}
        shell: bash
        run: |
          if [ "${RENV}" = "true" ]; then
            Rscript -e 'renv::restore()'
          else
            Rscript -e 'install.packages(c("knitr", "rmarkdown"))'
          fi

      - name: Check Python environment
        id: check-python-env
        env:
          PYTHON: ${{ inputs.python }}
        run: |
          if [ "${PYTHON}" = "true" ] && [ -f "pyproject.toml" ]; then
            echo "python=true" >> "${GITHUB_OUTPUT}"
          else
            echo "python=false" >> "${GITHUB_OUTPUT}"
          fi
          if [ "${PYTHON}" = "true" ] && [ -f "uv.lock" ]; then
            echo "uv=true" >> "${GITHUB_OUTPUT}"
          else
            echo "uv=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install uv
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.uv == 'true' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install uv
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.uv == 'false' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.python == 'true' }}
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Set up Python
        if: ${{ inputs.python == 'true' && steps.check-python-env.outputs.python == 'false' }}
        uses: actions/setup-python@v6

      - name: Install Python dependencies
        if: ${{ inputs.python == 'true' }}
        env:
          UV: ${{ steps.check-python-env.outputs.uv == 'true' }}
        shell: bash
        run: |
          if [ "${UV}" = "true" ]; then
            uv sync
          else
            uv init --no-package --vcs none --bare --no-readme --author-from none
            uv venv
            source .venv/bin/activate
            uv add jupyter papermill
            uv sync
          fi

      - name: Set up Julia
        if: ${{ inputs.julia == 'true' }}
        uses: julia-actions/setup-julia@v2

      - name: Install Julia dependencies
        if: ${{ inputs.julia == 'true' }}
        shell: bash
        run: |
          julia -e 'using Pkg; Pkg.activate("."); Pkg.instantiate()'
          julia --project=. -e 'using Pkg; Pkg.add(["IJulia"])'

      - name: Set up Node.js
        uses: actions/setup-node@v5

      - name: Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: "${{ env.QUARTOVERSION }}"
          tinytex: false

      - name: Checkout repository with sparse checkout
        uses: actions/checkout@v5
        with:
          repository: mcanouil/quarto-workflows
          sparse-checkout: .github/workflows/assets/slides-to-pdf.sh
          sparse-checkout-cone-mode: false
          path: workflows

      - name: Render Quarto Project
        id: render-quarto
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }} # gh cli
        shell: bash
        run: |
          npm install -g decktape

          # Create or update _quarto.yml with intelligent merging
          SLIDES_SCRIPT="workflows/.github/workflows/assets/slides-to-pdf.sh"
          if [ ! -f "_quarto.yml" ]; then
            # Create new _quarto.yml if it doesn't exist
            {
              echo "project:"
              echo "  output-dir: ${OUTPUT_DIRECTORY}"
              echo "  post-render:"
              echo "    - ${SLIDES_SCRIPT}"
            } > _quarto.yml
          else
            # Update existing _quarto.yml
            echo "Existing _quarto.yml found, merging configuration..."
            # Set output-dir (always overwrite)
            yq eval '.project.output-dir = "${OUTPUT_DIRECTORY}"' -i _quarto.yml
            # Handle post-render array merging
            if yq eval '.project.post-render' _quarto.yml | grep -q "null"; then
              # No post-render exists, create it
              yq eval '.project.post-render = ["'${SLIDES_SCRIPT}'"]' -i _quarto.yml
            else
              # Check if our script is already in the post-render list
              if ! yq eval '.project.post-render[] | select(. == "'${SLIDES_SCRIPT}'")' _quarto.yml | grep -q "${SLIDES_SCRIPT}"; then
                # Add our script to the existing post-render list
                yq eval '.project.post-render += ["'${SLIDES_SCRIPT}'"]' -i _quarto.yml
              else
                echo "Script already exists in post-render list, skipping..."
              fi
            fi
          fi
          echo "Updated _quarto.yml:"
          cat _quarto.yml

          quarto render

          tar -czf gh-pages.tar.gz -C "${OUTPUT_DIRECTORY}" .

          if [ -d "release_assets" ]; then
            echo "slides_assets_exists=true" >> "${GITHUB_OUTPUT}"
            RELEASE_ASSETS_PATH="$(pwd)/release_assets"
            echo "release_assets_path=${RELEASE_ASSETS_PATH}" >> "${GITHUB_OUTPUT}"
          else
            echo "slides_assets_exists=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: "${{ env.OUTPUT_DIRECTORY }}"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload artifact (revealjs)
        uses: actions/upload-artifact@v4
        if: ${{ steps.render-quarto.outputs.slides_assets_exists == 'true' }}
        with:
          name: release-assets
          path: |
            ${{ steps.render-quarto.outputs.release_assets_path }}
            gh-pages.tar.gz

      - name: Upload artifact (default)
        uses: actions/upload-artifact@v4
        if: ${{ steps.render-quarto.outputs.slides_assets_exists == 'false' }}
        with:
          name: release-assets
          path: |
            gh-pages.tar.gz

  release:
    runs-on: ubuntu-latest

    needs:
      - bump-version
      - deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        if: ${{ inputs.gh-app-id != '' }}
        with:
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          echo "GIT_USER_NAME=${APP_SLUG}" >> "${GITHUB_ENV}"
          echo "GIT_USER_EMAIL=${APP_SLUG}" >> "${GITHUB_ENV}"

      - name: Update branch
        run: |
          git fetch --all
          git checkout ${GITHUB_REF_NAME}
          git pull origin ${GITHUB_REF_NAME}

      - name: Download PDF artifact
        id: download-release-assets-artifact
        uses: actions/download-artifact@v5
        with:
          name: release-assets
          path: release_assets

      - name: Release extension on GitHub
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }} # gh cli
          VERSION: ${{ needs.bump-version.outputs.version }}
          DATE: ${{ needs.bump-version.outputs.date }}
        shell: bash
        run: |
          assets=()
          while IFS= read -r -d '' file; do
            assets+=("${file}")
          done < <(find release_assets -type f -print0)

          gh release create "${VERSION}" \
            --title "${DATE}" \
            --generate-notes \
            "${assets[@]}"

      - name: Display workflow summary
        env:
          GH_PAGES_URL: ${{ needs.deploy.outputs.gh_pages_url }}
          VERSION: ${{ needs.bump-version.outputs.version }}
        shell: bash
        run: |
          {
            echo "# 🎉 Release Summary"
            echo ""
            echo "🤖 *Automated release completed successfully*"
            echo ""
            echo "- [📦 GitHub Release](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${VERSION})"
            echo "- [🌐 Live Website](${GH_PAGES_URL})"
            echo ""
          } >> "${GITHUB_STEP_SUMMARY}"
